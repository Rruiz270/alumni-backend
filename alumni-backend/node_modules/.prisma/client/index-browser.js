
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  role: 'role',
  level: 'level',
  studentId: 'studentId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AlumniScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  graduationYear: 'graduationYear',
  degree: 'degree',
  institution: 'institution',
  currentCompany: 'currentCompany',
  currentPosition: 'currentPosition',
  linkedInProfile: 'linkedInProfile',
  bio: 'bio',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PackageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalLessons: 'totalLessons',
  usedLessons: 'usedLessons',
  remainingLessons: 'remainingLessons',
  validFrom: 'validFrom',
  validUntil: 'validUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TopicScalarFieldEnum = {
  id: 'id',
  name: 'name',
  level: 'level',
  orderIndex: 'orderIndex',
  description: 'description',
  lessonPlan: 'lessonPlan',
  objectives: 'objectives',
  materials: 'materials',
  recursoGramatical: 'recursoGramatical',
  vocabulario: 'vocabulario',
  tema: 'tema',
  objetivoImplicito: 'objetivoImplicito',
  classroomLink: 'classroomLink'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  teacherId: 'teacherId',
  topicId: 'topicId',
  scheduledAt: 'scheduledAt',
  duration: 'duration',
  status: 'status',
  googleMeetLink: 'googleMeetLink',
  googleEventId: 'googleEventId',
  cancelledAt: 'cancelledAt',
  attendedAt: 'attendedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AvailabilityScalarFieldEnum = {
  id: 'id',
  teacherId: 'teacherId',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExerciseScalarFieldEnum = {
  id: 'id',
  topicId: 'topicId',
  phase: 'phase',
  category: 'category',
  type: 'type',
  title: 'title',
  instructions: 'instructions',
  content: 'content',
  correctAnswer: 'correctAnswer',
  points: 'points',
  orderIndex: 'orderIndex',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SlideScalarFieldEnum = {
  id: 'id',
  topicId: 'topicId',
  slideNumber: 'slideNumber',
  title: 'title',
  type: 'type',
  content: 'content',
  notes: 'notes',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SlideExerciseScalarFieldEnum = {
  id: 'id',
  slideId: 'slideId',
  type: 'type',
  content: 'content',
  options: 'options',
  correctAnswer: 'correctAnswer',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubmissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  exerciseId: 'exerciseId',
  answer: 'answer',
  score: 'score',
  feedback: 'feedback',
  submittedAt: 'submittedAt',
  gradedAt: 'gradedAt'
};

exports.Prisma.ProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  topicId: 'topicId',
  preClassComplete: 'preClassComplete',
  liveClassAttended: 'liveClassAttended',
  afterClassComplete: 'afterClassComplete',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  phase: 'phase',
  duration: 'duration',
  resourceUrl: 'resourceUrl',
  orderIndex: 'orderIndex',
  topicId: 'topicId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttendanceLogScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  studentId: 'studentId',
  action: 'action',
  timestamp: 'timestamp',
  recordedBy: 'recordedBy',
  source: 'source',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentStatsScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  totalClasses: 'totalClasses',
  attendedClasses: 'attendedClasses',
  attendanceRate: 'attendanceRate',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.ContentProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  contentId: 'contentId',
  completed: 'completed',
  timeSpent: 'timeSpent',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER',
  ADMIN: 'ADMIN',
  ALUMNI: 'ALUMNI'
};

exports.Level = exports.$Enums.Level = {
  A1: 'A1',
  A2: 'A2',
  B1: 'B1',
  B2: 'B2',
  C1: 'C1',
  C2: 'C2'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  SCHEDULED: 'SCHEDULED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED',
  NO_SHOW: 'NO_SHOW'
};

exports.Phase = exports.$Enums.Phase = {
  PRE_CLASS: 'PRE_CLASS',
  AFTER_CLASS: 'AFTER_CLASS'
};

exports.ExerciseCategory = exports.$Enums.ExerciseCategory = {
  READING: 'READING',
  WRITING: 'WRITING',
  LISTENING: 'LISTENING',
  SPEAKING: 'SPEAKING',
  GRAMMAR: 'GRAMMAR',
  VOCABULARY: 'VOCABULARY'
};

exports.ExerciseType = exports.$Enums.ExerciseType = {
  MULTIPLE_CHOICE: 'MULTIPLE_CHOICE',
  TRUE_FALSE: 'TRUE_FALSE',
  GAP_FILL: 'GAP_FILL',
  MATCHING: 'MATCHING',
  SEQUENCING: 'SEQUENCING',
  ESSAY: 'ESSAY',
  ERROR_CORRECTION: 'ERROR_CORRECTION',
  SENTENCE_TRANSFORMATION: 'SENTENCE_TRANSFORMATION',
  AUDIO_QUIZ: 'AUDIO_QUIZ',
  DICTATION: 'DICTATION',
  NOTE_TAKING: 'NOTE_TAKING',
  AUDIO_RECORDING: 'AUDIO_RECORDING',
  PRONUNCIATION: 'PRONUNCIATION',
  DRAG_DROP: 'DRAG_DROP',
  CROSSWORD: 'CROSSWORD',
  FLASHCARD: 'FLASHCARD'
};

exports.ContentType = exports.$Enums.ContentType = {
  reading: 'reading',
  video: 'video',
  audio: 'audio',
  exercise: 'exercise',
  quiz: 'quiz',
  discussion: 'discussion'
};

exports.ContentPhase = exports.$Enums.ContentPhase = {
  pre_class: 'pre_class',
  live_class: 'live_class',
  post_class: 'post_class'
};

exports.Prisma.ModelName = {
  User: 'User',
  Alumni: 'Alumni',
  Package: 'Package',
  Topic: 'Topic',
  Booking: 'Booking',
  Availability: 'Availability',
  Exercise: 'Exercise',
  Slide: 'Slide',
  SlideExercise: 'SlideExercise',
  Submission: 'Submission',
  Progress: 'Progress',
  Content: 'Content',
  AttendanceLog: 'AttendanceLog',
  StudentStats: 'StudentStats',
  Account: 'Account',
  ContentProgress: 'ContentProgress'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
