generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String            @id @default(cuid())
  email               String            @unique
  password            String
  name                String
  role                UserRole          @default(STUDENT)
  level               Level?
  studentId           String?           @unique
  isActive            Boolean           @default(true)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  accounts            Account[]
  alumni              Alumni?
  attendanceLogs      AttendanceLog[]
  teacherAvailability Availability[]
  studentBookings     Booking[]         @relation("StudentBookings")
  teacherClasses      Booking[]         @relation("TeacherBookings")
  contentProgress     ContentProgress[]
  packages            Package[]
  progress            Progress[]
  studentStats        StudentStats?
  submissions         Submission[]
}

model Alumni {
  id              String   @id @default(cuid())
  userId          String   @unique
  graduationYear  Int?
  degree          String?
  institution     String?
  currentCompany  String?
  currentPosition String?
  linkedInProfile String?
  bio             String?
  isPublic        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
}

model Package {
  id               String   @id @default(cuid())
  userId           String
  totalLessons     Int
  usedLessons      Int      @default(0)
  remainingLessons Int
  validFrom        DateTime
  validUntil       DateTime
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id])
}

model Topic {
  id                String     @id @default(cuid())
  name              String
  level             Level
  orderIndex        Int
  description       String?
  lessonPlan        String?
  objectives        Json?
  materials         Json?
  recursoGramatical String?
  vocabulario       String?
  tema              String?
  objetivoImplicito String?
  classroomLink     String?
  bookings          Booking[]
  contents          Content[]
  exercises         Exercise[]
  progress          Progress[]
  liveClassSlides   Slide[]
}

model Booking {
  id             String          @id @default(cuid())
  studentId      String
  teacherId      String
  topicId        String
  scheduledAt    DateTime
  duration       Int             @default(60)
  status         BookingStatus   @default(SCHEDULED)
  googleMeetLink String?
  googleEventId  String?
  cancelledAt    DateTime?
  attendedAt     DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  attendanceLogs AttendanceLog[]
  student        User            @relation("StudentBookings", fields: [studentId], references: [id])
  teacher        User            @relation("TeacherBookings", fields: [teacherId], references: [id])
  topic          Topic           @relation(fields: [topicId], references: [id])
}

model Availability {
  id        String   @id @default(cuid())
  teacherId String
  dayOfWeek Int
  startTime String
  endTime   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  teacher   User     @relation(fields: [teacherId], references: [id])
}

model Exercise {
  id            String           @id @default(cuid())
  topicId       String
  phase         Phase
  category      ExerciseCategory
  type          ExerciseType
  title         String
  instructions  String
  content       Json
  correctAnswer Json?
  points        Int              @default(10)
  orderIndex    Int
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  topic         Topic            @relation(fields: [topicId], references: [id])
  submissions   Submission[]
}

model Slide {
  id          String          @id @default(cuid())
  topicId     String
  slideNumber Int
  title       String
  type        String
  content     Json
  notes       String?
  order       Int             @default(0)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  topic       Topic           @relation(fields: [topicId], references: [id])
  exercises   SlideExercise[]
}

model SlideExercise {
  id            String   @id @default(cuid())
  slideId       String
  type          String
  content       String
  options       Json?
  correctAnswer String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  slide         Slide    @relation(fields: [slideId], references: [id], onDelete: Cascade)
}

model Submission {
  id          String    @id @default(cuid())
  userId      String
  exerciseId  String
  answer      Json
  score       Float?
  feedback    String?
  submittedAt DateTime  @default(now())
  gradedAt    DateTime?
  exercise    Exercise  @relation(fields: [exerciseId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}

model Progress {
  id                 String    @id @default(cuid())
  userId             String
  topicId            String
  preClassComplete   Boolean   @default(false)
  liveClassAttended  Boolean   @default(false)
  afterClassComplete Boolean   @default(false)
  completedAt        DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  topic              Topic     @relation(fields: [topicId], references: [id])
  user               User      @relation(fields: [userId], references: [id])

  @@unique([userId, topicId])
}

model Content {
  id              String            @id @default(cuid())
  title           String
  description     String
  type            ContentType
  phase           ContentPhase
  duration        Int               @default(15)
  resourceUrl     String?
  orderIndex      Int               @default(1)
  topicId         String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  topic           Topic             @relation(fields: [topicId], references: [id])
  contentProgress ContentProgress[]

  @@index([topicId])
  @@index([topicId, phase])
}

model AttendanceLog {
  id         String   @id @default(cuid())
  bookingId  String
  studentId  String
  action     String
  timestamp  DateTime
  recordedBy String?
  source     String   @default("manual")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  booking    Booking  @relation(fields: [bookingId], references: [id])
  student    User     @relation(fields: [studentId], references: [id])
}

model StudentStats {
  id              String   @id @default(cuid())
  studentId       String   @unique
  totalClasses    Int      @default(0)
  attendedClasses Int      @default(0)
  attendanceRate  Int      @default(0)
  lastUpdated     DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  student         User     @relation(fields: [studentId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model ContentProgress {
  id          String    @id @default(cuid())
  userId      String
  contentId   String
  completed   Boolean   @default(false)
  timeSpent   Int       @default(0)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  content     Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
  @@index([userId])
  @@index([contentId])
  @@index([userId, completed])
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
  ALUMNI
}

enum Level {
  A1
  A2
  B1
  B2
  C1
  C2
}

enum BookingStatus {
  SCHEDULED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum Phase {
  PRE_CLASS
  AFTER_CLASS
}

enum ExerciseCategory {
  READING
  WRITING
  LISTENING
  SPEAKING
  GRAMMAR
  VOCABULARY
}

enum ExerciseType {
  MULTIPLE_CHOICE
  TRUE_FALSE
  GAP_FILL
  MATCHING
  SEQUENCING
  ESSAY
  ERROR_CORRECTION
  SENTENCE_TRANSFORMATION
  AUDIO_QUIZ
  DICTATION
  NOTE_TAKING
  AUDIO_RECORDING
  PRONUNCIATION
  DRAG_DROP
  CROSSWORD
  FLASHCARD
}

enum ContentType {
  reading
  video
  audio
  exercise
  quiz
  discussion
}

enum ContentPhase {
  pre_class
  live_class
  post_class
}
