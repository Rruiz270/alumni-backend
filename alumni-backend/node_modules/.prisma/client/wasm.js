
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  name: 'name',
  role: 'role',
  level: 'level',
  studentId: 'studentId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AlumniScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  graduationYear: 'graduationYear',
  degree: 'degree',
  institution: 'institution',
  currentCompany: 'currentCompany',
  currentPosition: 'currentPosition',
  linkedInProfile: 'linkedInProfile',
  bio: 'bio',
  isPublic: 'isPublic',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PackageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  totalLessons: 'totalLessons',
  usedLessons: 'usedLessons',
  remainingLessons: 'remainingLessons',
  validFrom: 'validFrom',
  validUntil: 'validUntil',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TopicScalarFieldEnum = {
  id: 'id',
  name: 'name',
  level: 'level',
  orderIndex: 'orderIndex',
  description: 'description',
  lessonPlan: 'lessonPlan',
  objectives: 'objectives',
  materials: 'materials',
  recursoGramatical: 'recursoGramatical',
  vocabulario: 'vocabulario',
  tema: 'tema',
  objetivoImplicito: 'objetivoImplicito',
  classroomLink: 'classroomLink'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  teacherId: 'teacherId',
  topicId: 'topicId',
  scheduledAt: 'scheduledAt',
  duration: 'duration',
  status: 'status',
  googleMeetLink: 'googleMeetLink',
  googleEventId: 'googleEventId',
  cancelledAt: 'cancelledAt',
  attendedAt: 'attendedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AvailabilityScalarFieldEnum = {
  id: 'id',
  teacherId: 'teacherId',
  dayOfWeek: 'dayOfWeek',
  startTime: 'startTime',
  endTime: 'endTime',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExerciseScalarFieldEnum = {
  id: 'id',
  topicId: 'topicId',
  phase: 'phase',
  category: 'category',
  type: 'type',
  title: 'title',
  instructions: 'instructions',
  content: 'content',
  correctAnswer: 'correctAnswer',
  points: 'points',
  orderIndex: 'orderIndex',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SlideScalarFieldEnum = {
  id: 'id',
  topicId: 'topicId',
  slideNumber: 'slideNumber',
  title: 'title',
  type: 'type',
  content: 'content',
  notes: 'notes',
  order: 'order',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SlideExerciseScalarFieldEnum = {
  id: 'id',
  slideId: 'slideId',
  type: 'type',
  content: 'content',
  options: 'options',
  correctAnswer: 'correctAnswer',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SubmissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  exerciseId: 'exerciseId',
  answer: 'answer',
  score: 'score',
  feedback: 'feedback',
  submittedAt: 'submittedAt',
  gradedAt: 'gradedAt'
};

exports.Prisma.ProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  topicId: 'topicId',
  preClassComplete: 'preClassComplete',
  liveClassAttended: 'liveClassAttended',
  afterClassComplete: 'afterClassComplete',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  type: 'type',
  phase: 'phase',
  duration: 'duration',
  resourceUrl: 'resourceUrl',
  orderIndex: 'orderIndex',
  topicId: 'topicId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AttendanceLogScalarFieldEnum = {
  id: 'id',
  bookingId: 'bookingId',
  studentId: 'studentId',
  action: 'action',
  timestamp: 'timestamp',
  recordedBy: 'recordedBy',
  source: 'source',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StudentStatsScalarFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  totalClasses: 'totalClasses',
  attendedClasses: 'attendedClasses',
  attendanceRate: 'attendanceRate',
  lastUpdated: 'lastUpdated',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state'
};

exports.Prisma.ContentProgressScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  contentId: 'contentId',
  completed: 'completed',
  timeSpent: 'timeSpent',
  completedAt: 'completedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  STUDENT: 'STUDENT',
  TEACHER: 'TEACHER',
  ADMIN: 'ADMIN',
  ALUMNI: 'ALUMNI'
};

exports.Level = exports.$Enums.Level = {
  A1: 'A1',
  A2: 'A2',
  B1: 'B1',
  B2: 'B2',
  C1: 'C1',
  C2: 'C2'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  SCHEDULED: 'SCHEDULED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED',
  NO_SHOW: 'NO_SHOW'
};

exports.Phase = exports.$Enums.Phase = {
  PRE_CLASS: 'PRE_CLASS',
  AFTER_CLASS: 'AFTER_CLASS'
};

exports.ExerciseCategory = exports.$Enums.ExerciseCategory = {
  READING: 'READING',
  WRITING: 'WRITING',
  LISTENING: 'LISTENING',
  SPEAKING: 'SPEAKING',
  GRAMMAR: 'GRAMMAR',
  VOCABULARY: 'VOCABULARY'
};

exports.ExerciseType = exports.$Enums.ExerciseType = {
  MULTIPLE_CHOICE: 'MULTIPLE_CHOICE',
  TRUE_FALSE: 'TRUE_FALSE',
  GAP_FILL: 'GAP_FILL',
  MATCHING: 'MATCHING',
  SEQUENCING: 'SEQUENCING',
  ESSAY: 'ESSAY',
  ERROR_CORRECTION: 'ERROR_CORRECTION',
  SENTENCE_TRANSFORMATION: 'SENTENCE_TRANSFORMATION',
  AUDIO_QUIZ: 'AUDIO_QUIZ',
  DICTATION: 'DICTATION',
  NOTE_TAKING: 'NOTE_TAKING',
  AUDIO_RECORDING: 'AUDIO_RECORDING',
  PRONUNCIATION: 'PRONUNCIATION',
  DRAG_DROP: 'DRAG_DROP',
  CROSSWORD: 'CROSSWORD',
  FLASHCARD: 'FLASHCARD'
};

exports.ContentType = exports.$Enums.ContentType = {
  reading: 'reading',
  video: 'video',
  audio: 'audio',
  exercise: 'exercise',
  quiz: 'quiz',
  discussion: 'discussion'
};

exports.ContentPhase = exports.$Enums.ContentPhase = {
  pre_class: 'pre_class',
  live_class: 'live_class',
  post_class: 'post_class'
};

exports.Prisma.ModelName = {
  User: 'User',
  Alumni: 'Alumni',
  Package: 'Package',
  Topic: 'Topic',
  Booking: 'Booking',
  Availability: 'Availability',
  Exercise: 'Exercise',
  Slide: 'Slide',
  SlideExercise: 'SlideExercise',
  Submission: 'Submission',
  Progress: 'Progress',
  Content: 'Content',
  AttendanceLog: 'AttendanceLog',
  StudentStats: 'StudentStats',
  Account: 'Account',
  ContentProgress: 'ContentProgress'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/Users/Raphael/alumni-backend/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "darwin",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/Users/Raphael/alumni-backend/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "generator client {\n  provider = \"prisma-client-js\"\n}\n\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\nmodel User {\n  id                  String            @id @default(cuid())\n  email               String            @unique\n  password            String\n  name                String\n  role                UserRole          @default(STUDENT)\n  level               Level?\n  studentId           String?           @unique\n  isActive            Boolean           @default(true)\n  createdAt           DateTime          @default(now())\n  updatedAt           DateTime          @updatedAt\n  accounts            Account[]\n  alumni              Alumni?\n  attendanceLogs      AttendanceLog[]\n  teacherAvailability Availability[]\n  studentBookings     Booking[]         @relation(\"StudentBookings\")\n  teacherClasses      Booking[]         @relation(\"TeacherBookings\")\n  contentProgress     ContentProgress[]\n  packages            Package[]\n  progress            Progress[]\n  studentStats        StudentStats?\n  submissions         Submission[]\n}\n\nmodel Alumni {\n  id              String   @id @default(cuid())\n  userId          String   @unique\n  graduationYear  Int?\n  degree          String?\n  institution     String?\n  currentCompany  String?\n  currentPosition String?\n  linkedInProfile String?\n  bio             String?\n  isPublic        Boolean  @default(true)\n  createdAt       DateTime @default(now())\n  updatedAt       DateTime @updatedAt\n  user            User     @relation(fields: [userId], references: [id])\n}\n\nmodel Package {\n  id               String   @id @default(cuid())\n  userId           String\n  totalLessons     Int\n  usedLessons      Int      @default(0)\n  remainingLessons Int\n  validFrom        DateTime\n  validUntil       DateTime\n  createdAt        DateTime @default(now())\n  updatedAt        DateTime @updatedAt\n  user             User     @relation(fields: [userId], references: [id])\n}\n\nmodel Topic {\n  id                String     @id @default(cuid())\n  name              String\n  level             Level\n  orderIndex        Int\n  description       String?\n  lessonPlan        String?\n  objectives        Json?\n  materials         Json?\n  recursoGramatical String?\n  vocabulario       String?\n  tema              String?\n  objetivoImplicito String?\n  classroomLink     String?\n  bookings          Booking[]\n  contents          Content[]\n  exercises         Exercise[]\n  progress          Progress[]\n  liveClassSlides   Slide[]\n}\n\nmodel Booking {\n  id             String          @id @default(cuid())\n  studentId      String\n  teacherId      String\n  topicId        String\n  scheduledAt    DateTime\n  duration       Int             @default(60)\n  status         BookingStatus   @default(SCHEDULED)\n  googleMeetLink String?\n  googleEventId  String?\n  cancelledAt    DateTime?\n  attendedAt     DateTime?\n  createdAt      DateTime        @default(now())\n  updatedAt      DateTime        @updatedAt\n  attendanceLogs AttendanceLog[]\n  student        User            @relation(\"StudentBookings\", fields: [studentId], references: [id])\n  teacher        User            @relation(\"TeacherBookings\", fields: [teacherId], references: [id])\n  topic          Topic           @relation(fields: [topicId], references: [id])\n}\n\nmodel Availability {\n  id        String   @id @default(cuid())\n  teacherId String\n  dayOfWeek Int\n  startTime String\n  endTime   String\n  isActive  Boolean  @default(true)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n  teacher   User     @relation(fields: [teacherId], references: [id])\n}\n\nmodel Exercise {\n  id            String           @id @default(cuid())\n  topicId       String\n  phase         Phase\n  category      ExerciseCategory\n  type          ExerciseType\n  title         String\n  instructions  String\n  content       Json\n  correctAnswer Json?\n  points        Int              @default(10)\n  orderIndex    Int\n  createdAt     DateTime         @default(now())\n  updatedAt     DateTime         @updatedAt\n  topic         Topic            @relation(fields: [topicId], references: [id])\n  submissions   Submission[]\n}\n\nmodel Slide {\n  id          String          @id @default(cuid())\n  topicId     String\n  slideNumber Int\n  title       String\n  type        String\n  content     Json\n  notes       String?\n  order       Int             @default(0)\n  createdAt   DateTime        @default(now())\n  updatedAt   DateTime        @updatedAt\n  topic       Topic           @relation(fields: [topicId], references: [id])\n  exercises   SlideExercise[]\n}\n\nmodel SlideExercise {\n  id            String   @id @default(cuid())\n  slideId       String\n  type          String\n  content       String\n  options       Json?\n  correctAnswer String?\n  createdAt     DateTime @default(now())\n  updatedAt     DateTime @updatedAt\n  slide         Slide    @relation(fields: [slideId], references: [id], onDelete: Cascade)\n}\n\nmodel Submission {\n  id          String    @id @default(cuid())\n  userId      String\n  exerciseId  String\n  answer      Json\n  score       Float?\n  feedback    String?\n  submittedAt DateTime  @default(now())\n  gradedAt    DateTime?\n  exercise    Exercise  @relation(fields: [exerciseId], references: [id])\n  user        User      @relation(fields: [userId], references: [id])\n}\n\nmodel Progress {\n  id                 String    @id @default(cuid())\n  userId             String\n  topicId            String\n  preClassComplete   Boolean   @default(false)\n  liveClassAttended  Boolean   @default(false)\n  afterClassComplete Boolean   @default(false)\n  completedAt        DateTime?\n  createdAt          DateTime  @default(now())\n  updatedAt          DateTime  @updatedAt\n  topic              Topic     @relation(fields: [topicId], references: [id])\n  user               User      @relation(fields: [userId], references: [id])\n\n  @@unique([userId, topicId])\n}\n\nmodel Content {\n  id              String            @id @default(cuid())\n  title           String\n  description     String\n  type            ContentType\n  phase           ContentPhase\n  duration        Int               @default(15)\n  resourceUrl     String?\n  orderIndex      Int               @default(1)\n  topicId         String\n  createdAt       DateTime          @default(now())\n  updatedAt       DateTime          @updatedAt\n  topic           Topic             @relation(fields: [topicId], references: [id])\n  contentProgress ContentProgress[]\n\n  @@index([topicId])\n  @@index([topicId, phase])\n}\n\nmodel AttendanceLog {\n  id         String   @id @default(cuid())\n  bookingId  String\n  studentId  String\n  action     String\n  timestamp  DateTime\n  recordedBy String?\n  source     String   @default(\"manual\")\n  createdAt  DateTime @default(now())\n  updatedAt  DateTime @updatedAt\n  booking    Booking  @relation(fields: [bookingId], references: [id])\n  student    User     @relation(fields: [studentId], references: [id])\n}\n\nmodel StudentStats {\n  id              String   @id @default(cuid())\n  studentId       String   @unique\n  totalClasses    Int      @default(0)\n  attendedClasses Int      @default(0)\n  attendanceRate  Int      @default(0)\n  lastUpdated     DateTime @default(now())\n  createdAt       DateTime @default(now())\n  updatedAt       DateTime @updatedAt\n  student         User     @relation(fields: [studentId], references: [id])\n}\n\nmodel Account {\n  id                String  @id @default(cuid())\n  userId            String\n  type              String\n  provider          String\n  providerAccountId String\n  refresh_token     String?\n  access_token      String?\n  expires_at        Int?\n  token_type        String?\n  scope             String?\n  id_token          String?\n  session_state     String?\n  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([provider, providerAccountId])\n}\n\nmodel ContentProgress {\n  id          String    @id @default(cuid())\n  userId      String\n  contentId   String\n  completed   Boolean   @default(false)\n  timeSpent   Int       @default(0)\n  completedAt DateTime?\n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @updatedAt\n  content     Content   @relation(fields: [contentId], references: [id], onDelete: Cascade)\n  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@unique([userId, contentId])\n  @@index([userId])\n  @@index([contentId])\n  @@index([userId, completed])\n}\n\nenum UserRole {\n  STUDENT\n  TEACHER\n  ADMIN\n  ALUMNI\n}\n\nenum Level {\n  A1\n  A2\n  B1\n  B2\n  C1\n  C2\n}\n\nenum BookingStatus {\n  SCHEDULED\n  CANCELLED\n  COMPLETED\n  NO_SHOW\n}\n\nenum Phase {\n  PRE_CLASS\n  AFTER_CLASS\n}\n\nenum ExerciseCategory {\n  READING\n  WRITING\n  LISTENING\n  SPEAKING\n  GRAMMAR\n  VOCABULARY\n}\n\nenum ExerciseType {\n  MULTIPLE_CHOICE\n  TRUE_FALSE\n  GAP_FILL\n  MATCHING\n  SEQUENCING\n  ESSAY\n  ERROR_CORRECTION\n  SENTENCE_TRANSFORMATION\n  AUDIO_QUIZ\n  DICTATION\n  NOTE_TAKING\n  AUDIO_RECORDING\n  PRONUNCIATION\n  DRAG_DROP\n  CROSSWORD\n  FLASHCARD\n}\n\nenum ContentType {\n  reading\n  video\n  audio\n  exercise\n  quiz\n  discussion\n}\n\nenum ContentPhase {\n  pre_class\n  live_class\n  post_class\n}\n",
  "inlineSchemaHash": "0961093581e6858b3c595146ac2b890e8dee32887749ffd6e7a4b1eb53d0b868",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"level\",\"kind\":\"enum\",\"type\":\"Level\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"accounts\",\"kind\":\"object\",\"type\":\"Account\",\"relationName\":\"AccountToUser\"},{\"name\":\"alumni\",\"kind\":\"object\",\"type\":\"Alumni\",\"relationName\":\"AlumniToUser\"},{\"name\":\"attendanceLogs\",\"kind\":\"object\",\"type\":\"AttendanceLog\",\"relationName\":\"AttendanceLogToUser\"},{\"name\":\"teacherAvailability\",\"kind\":\"object\",\"type\":\"Availability\",\"relationName\":\"AvailabilityToUser\"},{\"name\":\"studentBookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"StudentBookings\"},{\"name\":\"teacherClasses\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"TeacherBookings\"},{\"name\":\"contentProgress\",\"kind\":\"object\",\"type\":\"ContentProgress\",\"relationName\":\"ContentProgressToUser\"},{\"name\":\"packages\",\"kind\":\"object\",\"type\":\"Package\",\"relationName\":\"PackageToUser\"},{\"name\":\"progress\",\"kind\":\"object\",\"type\":\"Progress\",\"relationName\":\"ProgressToUser\"},{\"name\":\"studentStats\",\"kind\":\"object\",\"type\":\"StudentStats\",\"relationName\":\"StudentStatsToUser\"},{\"name\":\"submissions\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"SubmissionToUser\"}],\"dbName\":null},\"Alumni\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"graduationYear\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"degree\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"institution\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"currentCompany\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"currentPosition\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"linkedInProfile\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isPublic\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AlumniToUser\"}],\"dbName\":null},\"Package\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"totalLessons\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"usedLessons\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"remainingLessons\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"validFrom\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"validUntil\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PackageToUser\"}],\"dbName\":null},\"Topic\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"level\",\"kind\":\"enum\",\"type\":\"Level\"},{\"name\":\"orderIndex\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lessonPlan\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"objectives\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"materials\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"recursoGramatical\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"vocabulario\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"tema\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"objetivoImplicito\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"classroomLink\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToTopic\"},{\"name\":\"contents\",\"kind\":\"object\",\"type\":\"Content\",\"relationName\":\"ContentToTopic\"},{\"name\":\"exercises\",\"kind\":\"object\",\"type\":\"Exercise\",\"relationName\":\"ExerciseToTopic\"},{\"name\":\"progress\",\"kind\":\"object\",\"type\":\"Progress\",\"relationName\":\"ProgressToTopic\"},{\"name\":\"liveClassSlides\",\"kind\":\"object\",\"type\":\"Slide\",\"relationName\":\"SlideToTopic\"}],\"dbName\":null},\"Booking\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teacherId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topicId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scheduledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"BookingStatus\"},{\"name\":\"googleMeetLink\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"googleEventId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"cancelledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"attendedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"attendanceLogs\",\"kind\":\"object\",\"type\":\"AttendanceLog\",\"relationName\":\"AttendanceLogToBooking\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"StudentBookings\"},{\"name\":\"teacher\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TeacherBookings\"},{\"name\":\"topic\",\"kind\":\"object\",\"type\":\"Topic\",\"relationName\":\"BookingToTopic\"}],\"dbName\":null},\"Availability\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teacherId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"dayOfWeek\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"teacher\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AvailabilityToUser\"}],\"dbName\":null},\"Exercise\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topicId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"phase\",\"kind\":\"enum\",\"type\":\"Phase\"},{\"name\":\"category\",\"kind\":\"enum\",\"type\":\"ExerciseCategory\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"ExerciseType\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"instructions\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"correctAnswer\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"points\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"orderIndex\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"topic\",\"kind\":\"object\",\"type\":\"Topic\",\"relationName\":\"ExerciseToTopic\"},{\"name\":\"submissions\",\"kind\":\"object\",\"type\":\"Submission\",\"relationName\":\"ExerciseToSubmission\"}],\"dbName\":null},\"Slide\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topicId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slideNumber\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"notes\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"topic\",\"kind\":\"object\",\"type\":\"Topic\",\"relationName\":\"SlideToTopic\"},{\"name\":\"exercises\",\"kind\":\"object\",\"type\":\"SlideExercise\",\"relationName\":\"SlideToSlideExercise\"}],\"dbName\":null},\"SlideExercise\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slideId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"options\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"correctAnswer\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"slide\",\"kind\":\"object\",\"type\":\"Slide\",\"relationName\":\"SlideToSlideExercise\"}],\"dbName\":null},\"Submission\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"exerciseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"answer\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"feedback\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"submittedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"gradedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"exercise\",\"kind\":\"object\",\"type\":\"Exercise\",\"relationName\":\"ExerciseToSubmission\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SubmissionToUser\"}],\"dbName\":null},\"Progress\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"topicId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"preClassComplete\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"liveClassAttended\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"afterClassComplete\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"topic\",\"kind\":\"object\",\"type\":\"Topic\",\"relationName\":\"ProgressToTopic\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProgressToUser\"}],\"dbName\":null},\"Content\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"enum\",\"type\":\"ContentType\"},{\"name\":\"phase\",\"kind\":\"enum\",\"type\":\"ContentPhase\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"resourceUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"orderIndex\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"topicId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"topic\",\"kind\":\"object\",\"type\":\"Topic\",\"relationName\":\"ContentToTopic\"},{\"name\":\"contentProgress\",\"kind\":\"object\",\"type\":\"ContentProgress\",\"relationName\":\"ContentToContentProgress\"}],\"dbName\":null},\"AttendanceLog\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bookingId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"action\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"recordedBy\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"source\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"booking\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"AttendanceLogToBooking\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AttendanceLogToUser\"}],\"dbName\":null},\"StudentStats\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"totalClasses\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"attendedClasses\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"attendanceRate\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"lastUpdated\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"StudentStatsToUser\"}],\"dbName\":null},\"Account\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"providerAccountId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"refresh_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"access_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"expires_at\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"token_type\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"scope\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"id_token\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"session_state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AccountToUser\"}],\"dbName\":null},\"ContentProgress\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"contentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"completed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"timeSpent\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"completedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"content\",\"kind\":\"object\",\"type\":\"Content\",\"relationName\":\"ContentToContentProgress\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ContentProgressToUser\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

